#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: The Rust Programming Language
#+date: <2024-02-29 周四>
#+author: ysouyno
#+email: ysouyno@163.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.2 (Org mode 9.6.15)
#+cite_export:

* 我的理解

** 第 7.1 节 <2024-03-02 周六>

怎么没有人问问这句话怎么理解吗？为什么我用 Rust 创建了一个 Package，这
个 Package 只能包含一个 library crate 呢？我记得在 Cargo.toml 不是可以
包含很多个 library crate 依赖嘛？没有听说最多只能包含一个呀？

#+begin_quote
A package can contain as many binary crates as you like, but at most
only one library crate. A package must contain at least one crate,
whether that’s a library or binary crate.
#+end_quote

难道只有我一个人理解错了？我想这应该是中英文的翻译和理解问题吧！需要注
意这里的“包含”不是指 c++ 里的 include，而只是 contain。这句话要表达
的意思应该是：新建了一个 Rust 的 Package，这个 Package 里可以新增很多
个 crate，但是最多只能有一个 crate 是 library。

* 容易忘记的知识点

** 第 3.2 节 <2024-02-29 周四>

Rust 中的 ~char~ 类型是四字节长度，与我们平时以 c++ 的认知是不一样的。

#+begin_quote
Rust’s char type is four bytes in size and represents a Unicode
Scalar Value, which means it can represent a lot more than just
ASCII. Accented letters; Chinese, Japanese, and Korean characters;
emoji; and zero-width spaces are all valid char values in
Rust. Unicode Scalar Values range from U+0000 to U+D7FF and U+E000 to
U+10FFFF inclusive. However, a “character” isn’t really a concept
in Unicode, so your human intuition for what a “character” is may
not match up with what a char is in Rust.
#+end_quote

没有任何值的元组有一个特殊的名称 ~unit~ 。此值及其对应的类型都是 ~()~
，并表示空值或空返回类型。表达式如果不返回任何其他值，则隐式返回
~unit~ 。

** 第 3.3 节 <2024-02-29 周四>

整个 ~fn~ 函数就是一个 ~statement~ ，调用函数是一个 ~expression~ ，调
用一个宏是一个 ~expression~ ，花括号括起来的代码块是一个 ~expression~
（最后一个语句不能加分号）。

** 第 4.1 节 <2024-03-01 周五>

有两个特性要注意： ~Copy~ 和 ~Clone~ ， ~Copy~ 用于栈上的类型，比如整
形， ~Clone~ 用于堆上的类型，比如 ~String~ 。

如果一个类型实现了 ~Copy~ 特性，使用它的变量不会移动，而是简单地复制，
使它们在赋值给另一个变量后仍然有效。如果类型或其任何部分实现了 ~Drop~
特性，Rust 将不允许我们用 ~Copy~ 注释类型。

#+begin_quote
To learn about how to add the Copy annotation to your type to
implement the trait, see “Derivable Traits” in Appendix C.
#+end_quote

将变量传递给函数同样也会移动；返回值也可以转移所有权。

#+begin_src rust
  fn main() {
      let mut s = String::from("hello");

      let r1 = &s; // no problem
      let r2 = &s; // no problem
      let r3 = &mut s; // BIG PROBLEM

      println!("{}, {}, and {}", r1, r2, r3);
  }
#+end_src

请注意，引用的作用域从它被引入的地方开始，一直持续到最后一次使用该引用
的时候。

** 第 5.3 节 <2024-03-01 周五>

结构体方法里的 ~&self~ 参考，实现就是 ~self: &Self~ 的简写。

** 第 7.3 节 <2024-03-02 周六>

父模块中的项不能使用子模块中的私有项，但子模块中的项可以使用其祖先模块
中的项。

结构体除了设置整个为 ~pub~ ，还要设置每个成员的可见属性，而对于枚举类
型则不需要设置成员的可见属性，因为结构体成员默认是 ~private~ 的，而枚
举成员默认则是 ~public~ 的。

#+begin_src rust
  pub struct Breakfast {
      pub toast: String,
      seasonal_fruit: String,
  }
#+end_src

** 第 8.1 节 <2024-03-03 周日>

请注意下面这段代码是存在错误的：

#+begin_src rust
  fn main() {
      let mut v = vec![1, 2, 3, 4, 5];
      let first = &v[0];
      v.push(6);

      println!("The first element is: {first}");
  }
#+end_src

因为 ~vector~ 可能会随着长度的增加而申请更大的内存，所以 ~first~ 可能
会指向已经释放的内存。

对于 ~String~ 来说，按照索引来取它的单个字符是不合法的，因为它内部是
~utf-8~ 编码，但是如果要迭代输出整个 ~String~ 的话，有两种方式，
~chars~ 和 ~bytes~ ，见测试代码：

#+begin_src rust
  fn main() {
      let s = "你好";

      print!("{} as chars: ", s);
      for i in s.chars() {
          print!("{} ", i);
      }
      print!("\n{} as bytes: ", s);
      for i in s.bytes() {
          print!("{} ", i);
      }
      println!();
  }
#+end_src

#+begin_src text
  你好 as chars: 你 好
  你好 as bytes: 228 189 160 229 165 189
#+end_src

** 第 9.2 节 <2024-03-03 周日>

此节真的好长！

我之前经常使用的 ~unwrap~ ，对它还是不太了解，在这里可以有两点：

1. ~unwrap~ 如果失败，程序会直接 panic。
2. ~expect~ 和 ~unwrap~ 一样，只不过 ~expect~ 可以自定义文本。

*** DONE 尝试创建 ~OurError~ <2024-03-03 周日> <2024-03-04 周一>

这节里提到的 ~From~ 特性，并提到可以使用自定义的 ~OurError~ ，并为它实
现 ~impl From<io::Error> for OurError~ 特性，我觉得我有时间可以尝试一
下。

下面是我的尝试代码及输出：

#+begin_src rust
  #![allow(unused)]
  use std::fs::File;
  use std::io::{self, Read};

  #[derive(Debug)]
  struct OurError {
      desc: String,
  }

  impl From<io::Error> for OurError {
      fn from(value: io::Error) -> Self {
          OurError {
              desc: format!("From io::Error {} to OurError.", value),
          }
      }
  }

  fn read_username_from_file() -> Result<String, OurError> {
      let mut username_file = File::open("hello.txt")?;
      let mut username = String::new();
      username_file.read_to_string(&mut username)?;
      Ok(username)
  }

  fn main() {
      read_username_from_file().unwrap();
  }
#+end_src

程序输出：

#+begin_src text
  thread 'main' panicked at src\main.rs:26:31:
  called `Result::unwrap()` on an `Err` value: OurError { desc: "From io::Error 系统找不到指定的文件。 (os error 2) to OurError." }
  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
#+end_src

*** TODO ~Result~ 好像可以和 ~Option~ 相互转化 <2024-03-03 周日>

#+begin_quote
The ? operator won’t automatically convert a Result to an Option or
vice versa; in those cases, you can use methods like the ok method on
Result or the ok_or method on Option to do the conversion explicitly.
#+end_quote

** 第 10.3 节 <2024-03-04 周一>

生命周期就像模板参数一样！

** 第 13.1 节 <2024-03-06 周三>

最近几天怎么一看书就困，这一个小节已经看了一个半小时了，还没看完。

** 第 13.2 节 <2024-03-06 周三>

这段代码中 ~v1_iter~ 是需要设为 ~mut~ 的，但是在 ~for~ 循环中不用，为
什么？因为：

#+begin_quote
We didn't need to make ~v1_iter~ mutable when we used a ~for~ loop
because the loop took ownership of ~v1_iter~ and made it mutable
behind the scenes.
#+end_quote

#+begin_src rust
  #[cfg(test)]
  mod tests {
      #[test]
      fn iterator_demonstration() {
          let v1 = vec![1, 2, 3];

          let mut v1_iter = v1.iter();

          assert_eq!(v1_iter.next(), Some(&1));
          assert_eq!(v1_iter.next(), Some(&2));
          assert_eq!(v1_iter.next(), Some(&3));
          assert_eq!(v1_iter.next(), None);
      }
  }
#+end_src

#+begin_quote
If we want to create an iterator that takes
ownership of ~v1~ and returns owned values, we can call ~into_iter~ instead of
~iter~. Similarly, if we want to iterate over mutable references, we can call
~iter_mut~ instead of ~iter~.
#+end_quote

目前我总结了一点小小的命名规律：

1. ~to_string~ 会返回新生成一个 ~String~ 实例。
2. ~as_str~ 获得切片，即 ~&str~ 类型。
3. ~chars~ 用 C++ 思维理解为索引方式，在这里 ~char~ 是四字节。
4. ~bytes~ 用 C++ 思维理解即一个字节。
5. ~iter~ 即 immutable references。
6. ~into_iter~ 即迭代器的所有权转移。
7. ~into_mut~ 即 mutable references。

这节同时有两个概念要注意一下：即 ~consuming adaptor~ 和 ~iterator
adaptor~ 。

1. 前者是调用了 ~next()~ 方法的方法叫 ~consuming adaptor~ 。
2. 后者是指没有消耗迭代器的方法，它通过改变原有迭代器的某些方法以生成
   新的不同的迭代器。

** 第 14.2 节 <2024-03-06 周三>

yank 理解为“召回”比较贴切。

** 第 15.2 节 <2024-03-07 周四>

什么是 ~associated type~ ？下面例子中的 ~Target~ 就是：

#+begin_src rust
  use std::ops::Deref;

  impl<T> Deref for MyBox<T> {
      type Target = T;

      fn deref(&self) -> &Self::Target {
          &self.0
      }
  }
#+end_src

*** TODO 主动 ~drop~ <2024-03-07 周四>

这里有个问题书中没讲：既然可以主动调用 ~std::mem::drop~ 释放，那是怎么
保证被主动释放的变量不会再被 ~Drop~ 的 ~drop~ 再自动调用一次呢？

** 第 15.4 节 <2024-03-07 周四>

我觉得这句话说得比较好：

我们在什么情况下使用 ~Rc<T>~ 呢？如果一个程序要用的一块内存在程序中被
多个部分使用，但是又不知道哪个部分是最后使用的，这个时候就可以用
~Rc<T>~ 来指定这块内存被多个所有者拥有；如果你知道哪个部分会最后使用，
你只需要将这个部分设置为所有者。

** 第 15.5 节 <2024-03-07 周四>

#+begin_quote
+ ~Rc<T>~ enables multiple owners of the same data; ~Box<T>~ and
  ~RefCell<T>~ have single owners.

+ ~Box<T>~ allows immutable or mutable borrows checked at compile
  time; ~Rc<T>~ allows only immutable borrows checked at compile time;
  ~RefCell<T>~ allows immutable or mutable borrows checked at runtime.

+ Because ~RefCell<T>~ allows mutable borrows checked at runtime, you
  can mutate the value inside the ~RefCell<T>~ even when the
  ~RefCell<T>~ is immutable.
#+end_quote

** 第17.3 节 <2024-03-13 周三>

#+begin_quote
We need to set ~state~ to ~None~ temporarily rather than setting it
directly with code like ~self.state = self.state.request_review();~ to
get ownership of the ~state~ value. This ensures ~Post~ can’t use the
old ~state~ value after we’ve transformed it into a new state.
#+end_quote

这段话没理解，它指的应该是这句代码：

#+begin_src rust
  impl Post {
      // --snip--
      pub fn request_review(&mut self) {
          if let Some(s) = self.state.take() {
              self.state = Some(s.request_review())
          }
      }
  }
#+end_src

*** TODO Why Not An Enum? <2024-03-13 周三>

#+begin_quote
You may have been wondering why we didn’t use an ~enum~ with the
different possible post states as variants. That’s certainly a
possible solution, try it and compare the end results to see which you
prefer! One disadvantage of using an enum is every place that checks
the value of the enum will need a ~match~ expression or similar to
handle every possible variant. This could get more repetitive than
this trait object solution.
#+end_quote

** 第 19.2 节 <2024-03-14 周四>

看到这句话，这节我就不想看了：

#+begin_quote
We’ve described most of the advanced features in this chapter as
being rarely needed.
#+end_quote
